// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_basis_a
NumericVector get_basis_a(NumericVector kvec, NumericVector qvec, NumericVector thetavec);
RcppExport SEXP _nbRegQF_get_basis_a(SEXP kvecSEXP, SEXP qvecSEXP, SEXP thetavecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type kvec(kvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetavec(thetavecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_basis_a(kvec, qvec, thetavec));
    return rcpp_result_gen;
END_RCPP
}
// get_den
NumericVector get_den(NumericVector xval, NumericMatrix intervalmat, NumericVector avec, NumericVector thetavec);
RcppExport SEXP _nbRegQF_get_den(SEXP xvalSEXP, SEXP intervalmatSEXP, SEXP avecSEXP, SEXP thetavecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type intervalmat(intervalmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetavec(thetavecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_den(xval, intervalmat, avec, thetavec));
    return rcpp_result_gen;
END_RCPP
}
// comp_ll_alpha
NumericVector comp_ll_alpha(NumericVector alph_c, NumericMatrix x_sim_mat, NumericMatrix theta_mat_i, Function f, double L, double shape, String basis_fun, double ntimes);
RcppExport SEXP _nbRegQF_comp_ll_alpha(SEXP alph_cSEXP, SEXP x_sim_matSEXP, SEXP theta_mat_iSEXP, SEXP fSEXP, SEXP LSEXP, SEXP shapeSEXP, SEXP basis_funSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alph_c(alph_cSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_sim_mat(x_sim_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta_mat_i(theta_mat_iSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< String >::type basis_fun(basis_funSEXP);
    Rcpp::traits::input_parameter< double >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_ll_alpha(alph_c, x_sim_mat, theta_mat_i, f, L, shape, basis_fun, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// get_basis_a_gamma
NumericVector get_basis_a_gamma(NumericVector kvec, NumericVector qvec, NumericVector thetavec, double shape);
RcppExport SEXP _nbRegQF_get_basis_a_gamma(SEXP kvecSEXP, SEXP qvecSEXP, SEXP thetavecSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type kvec(kvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetavec(thetavecSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_basis_a_gamma(kvec, qvec, thetavec, shape));
    return rcpp_result_gen;
END_RCPP
}
// get_den_gamma
NumericVector get_den_gamma(NumericVector xval, NumericMatrix intervalmat, NumericVector avec, NumericVector thetavec, double shape);
RcppExport SEXP _nbRegQF_get_den_gamma(SEXP xvalSEXP, SEXP intervalmatSEXP, SEXP avecSEXP, SEXP thetavecSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type intervalmat(intervalmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetavec(thetavecSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_den_gamma(xval, intervalmat, avec, thetavec, shape));
    return rcpp_result_gen;
END_RCPP
}
// get_Mlist
Rcpp::List get_Mlist(arma::mat BK_beta, arma::vec omega_vec, List theta_pre);
RcppExport SEXP _nbRegQF_get_Mlist(SEXP BK_betaSEXP, SEXP omega_vecSEXP, SEXP theta_preSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type BK_beta(BK_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< List >::type theta_pre(theta_preSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Mlist(BK_beta, omega_vec, theta_pre));
    return rcpp_result_gen;
END_RCPP
}
// get_mulist
Rcpp::List get_mulist(List theta_prod, List M_list, arma::vec omega_vec, arma::vec z, arma::mat BK_beta);
RcppExport SEXP _nbRegQF_get_mulist(SEXP theta_prodSEXP, SEXP M_listSEXP, SEXP omega_vecSEXP, SEXP zSEXP, SEXP BK_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type theta_prod(theta_prodSEXP);
    Rcpp::traits::input_parameter< List >::type M_list(M_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type BK_beta(BK_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mulist(theta_prod, M_list, omega_vec, z, BK_beta));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _nbRegQF_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// sample_basiscoef
arma::mat sample_basiscoef(List mu_list, List sigma_list, int ntheta);
RcppExport SEXP _nbRegQF_sample_basiscoef(SEXP mu_listSEXP, SEXP sigma_listSEXP, SEXP nthetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mu_list(mu_listSEXP);
    Rcpp::traits::input_parameter< List >::type sigma_list(sigma_listSEXP);
    Rcpp::traits::input_parameter< int >::type ntheta(nthetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_basiscoef(mu_list, sigma_list, ntheta));
    return rcpp_result_gen;
END_RCPP
}
// compq_cpp_XZonly
arma::mat compq_cpp_XZonly(arma::mat beta_x_post, arma::mat beta_z_post, List Xdesign_quan_post, arma::mat Zdesign, int ntotal, int npost);
RcppExport SEXP _nbRegQF_compq_cpp_XZonly(SEXP beta_x_postSEXP, SEXP beta_z_postSEXP, SEXP Xdesign_quan_postSEXP, SEXP ZdesignSEXP, SEXP ntotalSEXP, SEXP npostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta_x_post(beta_x_postSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_z_post(beta_z_postSEXP);
    Rcpp::traits::input_parameter< List >::type Xdesign_quan_post(Xdesign_quan_postSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zdesign(ZdesignSEXP);
    Rcpp::traits::input_parameter< int >::type ntotal(ntotalSEXP);
    Rcpp::traits::input_parameter< int >::type npost(npostSEXP);
    rcpp_result_gen = Rcpp::wrap(compq_cpp_XZonly(beta_x_post, beta_z_post, Xdesign_quan_post, Zdesign, ntotal, npost));
    return rcpp_result_gen;
END_RCPP
}
// compq_cpp
arma::mat compq_cpp(arma::mat beta_x_post, arma::mat beta_z_post, arma::mat rand_post, List Xdesign_quan_post, arma::mat Zdesign, int ntotal, int npost);
RcppExport SEXP _nbRegQF_compq_cpp(SEXP beta_x_postSEXP, SEXP beta_z_postSEXP, SEXP rand_postSEXP, SEXP Xdesign_quan_postSEXP, SEXP ZdesignSEXP, SEXP ntotalSEXP, SEXP npostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta_x_post(beta_x_postSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_z_post(beta_z_postSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rand_post(rand_postSEXP);
    Rcpp::traits::input_parameter< List >::type Xdesign_quan_post(Xdesign_quan_postSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zdesign(ZdesignSEXP);
    Rcpp::traits::input_parameter< int >::type ntotal(ntotalSEXP);
    Rcpp::traits::input_parameter< int >::type npost(npostSEXP);
    rcpp_result_gen = Rcpp::wrap(compq_cpp(beta_x_post, beta_z_post, rand_post, Xdesign_quan_post, Zdesign, ntotal, npost));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _nbRegQF_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nbRegQF_get_basis_a", (DL_FUNC) &_nbRegQF_get_basis_a, 3},
    {"_nbRegQF_get_den", (DL_FUNC) &_nbRegQF_get_den, 4},
    {"_nbRegQF_comp_ll_alpha", (DL_FUNC) &_nbRegQF_comp_ll_alpha, 8},
    {"_nbRegQF_get_basis_a_gamma", (DL_FUNC) &_nbRegQF_get_basis_a_gamma, 4},
    {"_nbRegQF_get_den_gamma", (DL_FUNC) &_nbRegQF_get_den_gamma, 5},
    {"_nbRegQF_get_Mlist", (DL_FUNC) &_nbRegQF_get_Mlist, 3},
    {"_nbRegQF_get_mulist", (DL_FUNC) &_nbRegQF_get_mulist, 5},
    {"_nbRegQF_mvrnormArma", (DL_FUNC) &_nbRegQF_mvrnormArma, 3},
    {"_nbRegQF_sample_basiscoef", (DL_FUNC) &_nbRegQF_sample_basiscoef, 3},
    {"_nbRegQF_compq_cpp_XZonly", (DL_FUNC) &_nbRegQF_compq_cpp_XZonly, 6},
    {"_nbRegQF_compq_cpp", (DL_FUNC) &_nbRegQF_compq_cpp, 7},
    {"_nbRegQF_rcpp_hello_world", (DL_FUNC) &_nbRegQF_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_nbRegQF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
